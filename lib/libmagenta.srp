# libmagenta
require "libstd"
require "libmidi"
require "debug"
require "sched"
require "mfread"

# in unit of beat
fetching_period = 0.5
note_queues = [Queue(), Queue()]
minimum_queue_size = 120

# Rhythem patterns
# number of beats

# 2nd and 4th down beat for the 3rd one
rock_rhythem = [[0.5, 0.5, 0.75, 0.5, 0.5, 0.25, 0.5, 0.5], 
                [1, 0.5, 1, 0.5, 0.5, 0.5], 
                [0.5, 0.5, 0.5, 0.25, 0.25, 0.5, 0.5, 0.5, 0.25, 0.25], 
                [1, 0.75, 0.25, 0.25, 0.25, 0.5, 0.5, 0.25, 0.25]]
default_rhythem = [1, 0.5, 1, 0.5, 0.5, 0.5]

# chord threashold
CHORD_THREASHOLD = 0.5
NUM_LAST_NOTES = 10

def get_command(num_outputs, num_steps, primer_melody):
    display "get_command", num_outputs, num_steps
    var melody_str = ""
    var note_list = []
    while primer_melody.notes.size() > 0:
        note_list.append(primer_melody.notes.pop())

    for i = 0 to len(note_list):
        var note_ = note_list[i]
        melody_str = melody_str + str(note_.pitch) + ","
        for j = 1 to note_.duration / 0.25:
            melody_str = melody_str + "-2,"
    melody_str = "[" + subseq(melody_str, 0, -1) + "]"

    var retval = ""
    retval = retval + "melody_rnn_generate "
    retval = retval + "--config=lookback_rnn "
    retval = retval + "--bundle_file=/Users/yanmengjin1/software/lookback_rnn.mag "
    retval = retval + "--output_dir= ./output/ "
    retval = retval + "--num_outputs=" + str(num_outputs) + " "
    retval = retval + "--num_steps=" + str(num_steps) + " "
    retval = retval + "--primer_melody=" + melody_str

    # display retval
    var f = open("magenta.sh", "wb")
    f.write(retval)
    f.close()
    return retval

def last_measure():
    var measure = Measure(cur_beats_per_measure, 4)
    measure.style = cur_style

    # fit style/rhythem
    var notes_list = note_queues[0].last_n(NUM_LAST_NOTES)
    if notes_list[0].style == cur_style:
        var total_beats = 0
        for note in notes_list:
            total_beats = total_beats + note.duration
        measre.length(total_beats)
    else:
        if cur_style == 'rock':
            # choose a random rhythem
            var rhythem_num = int(4*random())
            var rhythem_len = len(rock_rhythem[rhythem_num])
            var start = NUM_LAST_NOTES - rhythem_len
            
            for i = start to NUM_LAST_NOTES:
                notes_list[i].duration = rock_rhythem[rhythem_num][i - start]
                measure.add_note(notes_list[i])

        else:
            # use the default rhythem
            rhythem_len = len(default_rhythem)
            start = NUM_LAST_NOTES - rhythem_len
            
            for i = start to NUM_LAST_NOTES:
                notes_list[i].duration = rock_rhythem[rhythem_num][i - start]
                measure.add_note(notes_list[i])

    # fit scale
    measure.notes = fit_scale(measure.notes)

    # fit chord
    measure.notes = fit_chord(measure.notes)

    return measure


RNN_flag = 0
def request_RNN():
    if RNN_flag == 0:
        display "request_RNN", the_sched.time
        RNN_flag = 1
        # TODO: construct request
        # TODO: need to assert if the queue is left more than 10 nodes        
        var measure = last_measure()
        get_command(2, 120, measure)
        system("./magenta.sh &")
        rtsched.cause(fetching_period, nil, 'get_RNN')
    return

def get_magenta_files():
    var dirlist = listdir("./output/")
    if len(dirlist) < 2:
        return nil
    var count = 0
    var retval = []
    for i = 0 to len(dirlist):
        if subseq(dirlist[i], -4) == ".mid":
            retval.append(dirlist[i])
    if len(retval) == 2:
        return retval
    else:
        return nil

def check_queue_length():
    var flag = 0
    for i = 0 to len(note_queues):
        if note_queues[i].size() < minimum_queue_size:
            flag = 1

    if flag == 1:
        rtsched.cause(0, nil, 'request_RNN')



def get_RNN():
    display "get_RNN", the_sched.time
    # check if filesystem has midi file and read file
    var f = open("test.mid", "r")

    var filelist = get_magenta_files()
    if filelist is nil:
        rtsched.cause(fetching_period, nil, 'get_RNN')
    else:
        for i = 0 to len(filelist):
            var filename = filelist[i]
            var note_list = parse_smf(filename)
            note_queue[i].push_list(note_list)
            system("rm " + filename)
        
        check_queue_length()
        RNN_flag = 0

# fit rhythem/style
def fit_rhythem(measure, note_queue):
    var total_beats = 0
    var note = note_queue.pop()

    # If the style is not changed
    if note.style == cur_style:
        measure.add_note(note)
        if note.duration > cur_beats_per_measure:
            note.duration = cur_beats_per_measure
        total_beats = total_beats + note.duration
        
        while total_beats < cur_beats_per_measure:
            note = note_queue.pop()
            if note.duration > cur_beats_per_measure - total_beats:
                note.duration = cur_beats_per_measure - total_beats
            measure.add_note(note)
            total_beats = total_beats + note.duration

    # If the style is changed
    else:
        if cur_style == 'rock':
            # choose a random rhythem
            total_beats = 0
            var rhythem_num = int(4*random())
            for i in rock_rhythem[rhythem_num]:
                if total_beats < cur_beats_per_measure:
                    note = note_queue.pop()
                    if note.duration > cur_beats_per_measure - total_beats:
                        note.duration = cur_beats_per_measure - total_beats
                    else:
                        note.duration = i
                    total_beats = total_beats + note.duration
                    measure.add_note(note)

        else:
            # use the default rhythem
            total_beats = 0
            for i in default_rhythem:
                if total_beats < cur_beats_per_measure:
                    note = note_queue.pop()
                    if note.duration > cur_beats_per_measure - total_beats:
                        note.duration = cur_beats_per_measure - total_beats
                    else:
                        note.duration = i
                    total_beats = total_beats + note.duration
                    measure.add_note(note)

    return measure


def fit_scale(notes_list):
    for i = 0 to len(notes_list):
        var note_index = notes_list[i].pitch % 12
        var new_note_index = note_index
        while cur_scale[new_note_index] == 0:
            new_note_index = (new_note_index + 1) % 12
        notes_list[i].pitch = notes_list[i].pitch +
            new_note_index - note_index

    return notes_list

def fit_chord(notes_list):
    # Check if the measure fit
    var in_chord = 0
    for note in notes_list:
        var note_index = notes_list[i].pitch % 12
        if cur_chord[note_index] == 1:
            in_chord = in_chord + 1

    if real(in_chord) / real(len(notes_list)) >= 0.5:
        return notes_list
    else:
        # fit chord
        var p = 0.5
        for note in notes_list:
            note_index = notes_list[i].pitch % 12
            if cur_chord[note_index] == 1:
                p = 0.1
            else:
                if random() < p:
                    var new_note_index = note_index
                    while cur_chord[note_index] == 0:
                        new_note_index = (new_note_index + 1) % 12
                    notes_list[i].pitch = notes_list[i].pitch + 
                        new_note_index - note_index
                p = p + 0.1

    return notes_list

def fit_measure(note_queue):
    display "fit_measure", the_sched.time
    # fetch notes from global note_queue and fit to chord, style, scale
    # returns a Measure instance

    # compute a measure using these variables:
    #    cur_style - a symbol representing style to play (if
    #       this is not your style, do not play)
    #    cur_start_beat - what beat to start on if you are stopped
    #    cur_stop_beat - what beat to stop on if you have started (you can
    #       stop slightly late; generally you should not start any notes 
    #       at or after tm_stop_beat but you can play a short note on 
    #       tm_stop_beat if it is stylistically sensible.)
    #    cur_beats_per_measure - the current time signature as an integer
    #    cur_bps - current beats per second (the vtsched will implement this
    #       but reading the vtsched timemap slope is not reliable because
    #       vtsched may be updated instantaneously after this call.
    #    cur_scale - boolean array representing current scale
    #    cur_chord - boolean array representing current chord
    #    cur_bass - integer representing root of chord
    #
    var measure = Measure(cur_beats_per_measure, 4)
    measure.style = cur_style
    
    # fit style/rhythem
    measure = fit_rhythem(measure, note_queue)

    # fit scale
    measure.notes = fit_scale(measure.notes)

    # fit chord
    measure.notes = fit_chord(measure.notes)

    # if note_queue.size() < 4:
    #     return nil
    # for i = 0 to 4:
    #     measure.add_note(note_queue.pop())
    # if note_queue.size() < minimum_queue_size:
    #     rtsched.cause(0, nil, 'request_RNN')

    check_queue_length()

    return measure

def fit_and_play(midi):
    display "fit_and_play", the_sched.time
    the_sched.cause(cur_beats_per_measure, nil, 'fit_and_play', midi)
    var measure = fit_measure()
    if measure is not nil:
        measure.play(midi, 0)


def parse_smf(file):
    var smf_bpm = 120.0
    var smf_tempo = 60.0 / smf_bpm
    smf_reader = Midifile_reader(file)
    var res = []
    var note_list = smf_reader.seq.tracks[1]
    var note_time = 0
    for i = 1 to len(note_list):
        var smf_note = note_list[i]
        # display smf_note.time, note_time
        if smf_note.time > note_time:
            var last_idx = len(res) - 1
            res[last_idx].duration = res[last_idx].duration + (smf_note.time - note_time) / smf_tempo
        res.append(Note(smf_note.key, smf_note.dur / smf_tempo))
        note_time = smf_note.time + smf_note.dur
    return res

# ################ TEST ###################
# res = parse_smf("test.mid")
# for i = 0 to len(res):
#     display i, res[i].pitch, res[i].duration
# notelist = parse_smf("test.mid")
# queue = Queue()
# queue.push_list(notelist)
# lastnotes = queue.last_n(10)

# while queue.size() > 0:
#     var note_ = queue.pop()
#     # display note_.pitch, note_.duration

# m = Measure(4,4)
# for i = 1 to 10:
#     m.add_note(lastnotes[i])
# get_command(2, 120, m)

# display get_magenta_files()

