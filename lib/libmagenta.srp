# libmagenta
require "libstd"
require "libmidi"
require "debug"
require "sched"

# in unit of beat
fetching_period = 0.5
note_queue = Queue()
minimum_queue_size = 120

RNN_flag = 0
def request_RNN():
    if RNN_flag == 0:
        display "request_RNN", the_sched.time
        RNN_flag = 1
        # run RNN
        rtsched.cause(fetching_period, nil, 'get_RNN')
    return

def get_RNN():
    display "get_RNN", the_sched.time
    # check if filesystem has midi file and read file
    var f = open("test.mid", "r")
    if f is nil:
        rtsched.cause(fetching_period, nil, 'get_RNN')
    else:
        # TODO: just testing here
        for i = 0 to 120:
            note_queue.push(Note(70, 1))
        # TODO: delete file
        RNN_flag = 0
        display note_queue.size()
        if note_queue.size() < minimum_queue_size:
            rtsched.cause(0, nil, 'request_RNN')

def fit_measure():
    display "fit_measure", the_sched.time
    # fetch notes from global note_queue and fit to chord, style, scale
    # returns a Measure instance
    # TODO: just testing here
    var measure = Measure(4, 4)
    for i = 0 to 4:
        measure.add_note(note_queue.pop())
    if note_queue.size() < minimum_queue_size:
        rtsched.cause(0, nil, 'request_RNN')

    return measure

def fit_and_play(midi):
    display "fit_and_play", the_sched.time
    the_sched.cause(4, nil, 'fit_and_play', midi)
    var measure = fit_measure()
    measure.play(midi, 0)



