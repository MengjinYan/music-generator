# libmidi - Basic Operations of Midi
require "sched"
require "libstd"

midi_status_note_off = 0x80
midi_status_note_on = 0x90
midi_status_key_pressure = 0xa0
midi_status_controller_change = 0xb0
midi_status_program_change = 0xc0
midi_status_channel_pressure = 0xd0
midi_status_pitch_bend = 0xe0

class Midi:
    var _midi_id
    var _buf
    var _latency
    var _midi

    def init(midi_id, buf, latency):
        _midi_id = midi_id
        _buf = buf
        _latency = latency
        _midi = midi_create()
        midi_open_output(_midi, _midi_id, _buf, _latency)

    def note_on(channel, pitch, velocity):
        channel = channel & 15
        midi_write(_midi, 0, chr(midi_status_note_on + channel) + chr(pitch) + chr(velocity))

    def note_off(channel, pitch):
        channel = channel & 15
        midi_write(_midi, 0, chr(midi_status_note_on + channel) + chr(pitch) + chr(0))
    
    def close():
        midi_close(_midi)


class Note:
    var pitch
    # how many beats
    var duration
    var velocity
    var _channel
    var style

    def init(pitch_, duration_):
        pitch = pitch_
        duration = duration_
        _channel = 1
        velocity = 110

    def play(midi, volume):
        midi.note_on(_channel, pitch, volume)

    def play_offset(midi, pitch_offset, volume):
        midi.note_on(_channel, pitch + pitch_offset, volume)

    def stop(midi):
        midi.note_off(_channel, pitch)

def play_note(midi, note, volume):
    display "play_note", note.pitch, note.duration, the_sched.time
    if note.pitch >= 0: # skip playing `rest`
        note.play(midi, volume)
        # schedule to stop this note
        the_sched.cause(0.9 * note.duration, nil, 'stop_note', midi, note)

def stop_note(midi, note):
    note.stop(midi)

class Measure:
    # time signiture
    var length
    var beat_unit
    var notes
    var style

    # length: number of beats in a measure
    # beat_unit: (beat)th note equals a beat 
    def init(length_, beat_unit_):
        length = length_
        beat_unit = beat_unit_
        notes = Queue()

    def add_note(note):
        notes.push(note)

# TODO: can the final note stay on to the next measure?
    def play(midi, vt_offset_):
        display "play measure", vt_offset_, the_sched.time
        var vt_time = vt_offset_
        while notes.empty() == 0:
            var note = notes.pop()
            display "dispatch note", note.pitch, note.duration
            the_sched.cause(vt_time, nil, 'play_note', midi, note, note.velocity) # TODO: change volume due to control and measure
            vt_time = vt_time + note.duration

def play_measure(midi, measure, vt_offset):
    measure.play(midi, vt_offset)

################ TESTS ################


# def measure_test():
#     midi = Midi(midi_out_default(), 100, 10)
#     sched_init()
#     vtsched.set_bps(2)
#     measure = Measure(4, 4)
#     measure.add_note(Note(70, 1))
#     measure.add_note(Note(70, 0.5))
#     measure.add_note(Note(70, 0.5))
#     measure.add_note(Note(70, 1))
#     measure.add_note(Note(70, 1))
#     display "measure init, done"
#     vtsched.cause(0, nil, 'play_measure', midi, measure, 0)
#     sched_run()

# measure_test()
