# libstd - Standard data structures for Serpent

# FIFO queue implemented using the underlying array structure
# TODO: use deque using rotate array or doubly linked list

def assertion(x):
    if x == 0:
        display "error", x
        exit()

class Queue:
    var _buf
    var _size
    
    def init():
        _buf = []
        _size = 0

    def push(x):
        assertion(len(_buf) == _size)
        _buf = [ x ] + _buf
        _size = _size + 1

    def push_list(x):
        assertion(len(_buf) == _size)
        _buf = x.reverse() + _buf
        _size = _size + len(x)

    def pop():
        assertion(len(_buf) == _size and _size > 0)
        _size = _size - 1
        return _buf.unappend()

    def front():
        assertion(len(_buf) == _size and _size > 0)
        return _buf[len(_buf) - 1]

    def tail():
        assertion(len(_buf) == _size and _size > 0)
        return _buf[0]

    def size():
        return _size

    def get(idx):
        assertion(len(_buf) == _size and idx >= 0 and idx < _size)
        return _buf[_size - 1 - idx]

    def set(idx, val):
        assertion(len(_buf) == _size and idx >= 0 and idx < _size)
        _buf[_size - 1 - idx] = val

    def empty():
        if _size == 0:
            return 1
        else:
            return 0

# # tests for class Queue
# test_array = [2,1,4,3]
# q = Queue()
# assertion(q.size() == 0)
# q.push(2)
# assertion(q.front() == 2)
# q.push(1)
# assertion(q.size() == 2)
# res = q.pop()
# assertion(res == 2)
# assertion(q.size() == 1)
# q.push_list(test_array)
# assertion(q.size() == 1 + len(test_array))
# res = q.pop()
# assertion(res == 1)
# for x in test_array:
#     front_res = q.front()
#     pop_res = q.pop()
#     assertion(front_res == pop_res)
#     assertion(pop_res == x)

# assertion(q.size() == 0)


# q.push_list(test_array)
# for i = 0 to len(test_array):
#     assertion(q.get(i) == test_array[i])
#     q.set(i, 2)
#     assertion(q.get(i) == 2)
#     q.set(i, test_array[i])
#     assertion(q.get(i) == test_array[i])
# display "basic test passed"


# q.dec_all(0.1)
# for i = 0 to len(test_array):
#     assertion(q.get(i) == test_array[i] - 0.1)



